<link rel="import" href="../polymer/polymer.html">
<link rel="import" href="../paper-spinner/paper-spinner.html">
<link rel="import" href="../iron-ajax/iron-ajax.html">

<dom-module id="simple-element">
  <style>
      :host {
        display: block;
        margin: 20px;
      }
    </style>
  <link rel="import" type="css" href="simple-element.css">
  <template>
    <div for="{{strAttr}}" style$="{{computeStyle(strAttr)}}">
      <a href$="{{computeHref(strAttr)}}">Hello there</a>
    </div>
    <input>
    <label on-click="labelClicked" for$="{{strAttr}}">Select one:</label>
    <select id="{{strAttr}}" value="{{strAttr::input}}" hidden$="{{!boolAttr}}">
      <option value="1">One</option>
      <option value="2" data-secret$="{{intAttr}}">Two</option>
    </select>
    <iron-ajax id="ajax"></iron-ajax>
    <template is="dom-if" if="{{boolAttr}}">
      <div><span>{{intAttr}}</span> times I tell you <span>{{strAttr}}</span>.</div>
      <div><span>{{intAttr}}</span> times I tell you <span>{{strAttr}}</span></div>
      <div>Yes <span>{{intAttr}}</span> times I tell you <span>{{strAttr}}</span></div>
      <div>Yes <span>{{intAttr}}</span> times I tell you <span>{{strAttr}}</span>.</div>
    </template>
  </template>
  <script>
    // this is a comment
    //TODO(polyup): Need to add an observer of z.v.k, calling somethingsUp.
    //Note that the semantics for observing properties and arrays has changed.
    Polymer({
      is: 'simple-element',
      properties: {
        // My favorite array.
        arrayAttr: {
          type: Array,
          value: function () {
            return [];
          },
          notify: true
        },
        auto: { computed: 'shouldAuto(intVal, boolVal)' },
        boolAttr: {
          type: Boolean,
          value: false,
          notify: true,
          observer: 'boolAttrChanged'
        },
        /**
         * The most important attribute in the world.
         */
        intAttr: {
          type: Number,
          value: 0,
          notify: true,
          observer: 'somethingsUp',
          reflectToAttribute: true
        },
        /** Super great object. */
        objAttr: {
          type: Object,
          value: function () {
            return {};
          },
          notify: true
        },
        params: { computed: 'computeParams(boolVal, intVal)' },
        url: { computed: 'computeUrl(intVal)' },
        x: { observer: 'somethingsUp' }
      },
      ready: function () {
        console.log('ready!');
        console.log('dom is ready!');
      },
      boolAttrChanged: function (newVal, oldVal) {
        console.log('changed from ', oldVal, ' to ', newVal);
      },
      somethingsUp: function (_, oldVal) {
        console.log('something changed from', oldVal);
      },
      shouldAuto: function (intVal, boolVal) {
        return intVal + boolVal;
      },
      isGood: function (intVal) {
        return intVal > 1;
      },
      hostAttributes: { 'tabindex': '0' },
      computeStyle: function (strAttr) {
        return 'background-color: ' + strAttr + ';';
      },
      computeHref: function (strAttr) {
        return 'http://example.com/' + strAttr;
      },
      computeUrl: function (intVal) {
        return '/api/v' + intVal + '/get';
      },
      computeParams: function (boolVal, intVal) {
        return {
          ok: boolVal,
          good: this.isGood(intVal)
        };
      }
    });
  </script>
</dom-module>
